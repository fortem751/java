#!/bin/sh -x



# ==============================================================================



# Global STI variable setup

source `dirname "$0"`/sti-setup



# Name of environment file included by "run-java.sh"

run_env_sh="run-env.sh"



# Maven arguments setting up the environment

maven_env_args="-Dmaven.repo.local=${STI_ARTIFACTS_DIR}/m2"



# =========================================================================

# Helper functions:



function check_error() {

  local label=$1

  local error=$2

  if [ ${error} -ne 0 ]; then

    echo "Aborting due to error code $error for $label"

    exit ${error}

  fi

}



function get_app_dir() {

 # Directory where to deploy generated artifacts

 # Note that this directory must be world writable since

 # Openshift selects a random UID when running.

 # Defaults to /tmp/app

 local dir=${JAVA_APP_DIR:-/tmp/app}

 if [ ! -d ${dir} ]; then

   mkdir -p ${dir}

   check_error "Creating ${dir}" $?

 fi

 echo ${dir}

}



function get_output_dir() {

  # Where artifacts are created within the build

  local dir=${OUTPUT_DIR:-${STI_SOURCE_DIR}/target}

  # If output_dir is not absolute then use it relative to STI_SOURCE_DIR

  if [ "${dir:0:1}" != "/" ]; then

     dir="${STI_SOURCE_DIR}/${dir}"

  fi

  echo ${dir}

}



function copy_dir() {

  local src=$1

  local dest=$2



  cp -r ${src}/* ${dest}

  check_error "copying ${src} to ${dest}" $?

}



# Save environment variables useful for

# the run script

function save_app_dir_in_run_env() {

  local app_dir=$1



  local dir=`dirname "$0"`

  local base=`cd "${dir}" ; pwd`



  cat <<EOT >>${base}/${run_env_sh}

JAVA_APP_DIR=${app_dir}

EOT

}



function mvn_settings_with_mirror {

  cat <<EOT

<settings>

  <mirrors>

    <mirror>

      <id>sti-mirror</id>

      <url>$1</url>

      <mirrorOf>central</mirrorOf>

    </mirror>

  </mirrors>

</settings>

EOT

}



function setup_maven() {

  if [ x"$MAVEN_MIRROR" != x ]; then

    echo "`mvn_settings_with_mirror ${MAVEN_MIRROR}`" > ${STI_SOURCE_DIR}/mvn-mirrors-settings.xml

    maven_env_args="${maven_env_args} -s ${STI_SOURCE_DIR}/mvn-mirrors-settings.xml"

  elif [ -f "${STI_SOURCE_DIR}/configuration/settings.xml" ]; then

    maven_env_args="${maven_env_args} -s ${STI_SOURCE_DIR}/configuration/settings.xml"

  fi

}



function create_classpath() {

  # Maven arguments like the local repo etc.

  local maven_args=$1

  # where mvn builds to (target/)

  local output_dir=$2

  # where to put the artefacts

  local app_dir=$3



  if [ x"$MAVEN_MODULE" != x ]; then

    maven_args="${maven_args} -pl $MAVEN_MODULE -am"

  fi



  # ================

  # Create classpath

  if [ -z ${MAVEN_USE_REPO_DEPENDENCIES} ] || [ "x${MAVEN_CLEAR_REPO}" != "x" ]; then

    # Copy all artefacts into the apps directory and setup a 'short' classpath

    mvn ${maven_args} \

        -Dmdep.outputFile=${output_dir}/classpath \

        -DincludeScope=runtime \

        -Dmdep.prefix="${app_dir}" \

        ${MAVEN_DEP_CLASSPATH_OPTS} \

        dependency:build-classpath

    check_error "Maven dependency extraction (short)" $?



    # Copu all dependencies directly into the app-dir

    mvn ${maven_args} \

        ${MAVEN_DEP_CLASSPATH_OPTS} \

        -DincludeScope=runtime \

        -DoutputDirectory="${app_dir}" \

        dependency:copy-dependencies

    check_error "Copy Maven dependencies to ${app_dir}" $?

  else

    # Create classpath pointing into the local maven repository

    mvn ${maven_args} \

        -Dmdep.outputFile=${output_dir}/classpath \

        -DincludeScope=runtime \

        ${maven_dep_args} ${MAVEN_DEP_CLASSPATH_OPTS} \

        dependency:build-classpath

    check_error "Maven dependency extraction" $?

  fi

}



function get_pom_property() {

  local property=$1

  local extra_args=""

  if [ "x$MAVEN_MODULE" != x ]; then

     extra_args="-pl ${MAVEN_MODULE}"

  fi

  # Use maven-help-plugin to extract a property

  # It's a bit hackish to get rid of the boiler plate. The first line without a `[....]` prefix

  # and without a space in the logoout is suppposed to be the variable value. Won't work

  # for pathes with space in it.

  echo `mvn help:evaluate \

            ${maven_env_args} \

            ${extra_args} \

            -Dexpression="${property}" | \

            grep -v '^\[.*\]' | \

            grep -v ' ' | \

            head -n 1`

}



function run_environment() {

  local app_dir=$1



  # Add the application jar to the environment file

  local packaging=`get_pom_property "project.packaging"`



  if [ "x${packaging}" = "xjar" ]; then

    local final_name=`get_pom_property "project.build.finalName"`

    echo "JAVA_APP_JAR=${app_dir}/${final_name}.jar"

  fi;

}



function build_maven() {

  # Where artefacts are created during build (i.e. 'target/'

  local output_dir=$1



  # Where to put the artefacts to be used by the run scropt

  local app_dir=$2



  # Default args: no tests

  local maven_args=${MAVEN_ARGS:-package -DskipTests -e}



  # If module is specified, only build this module

  if [ x"$MAVEN_MODULE" != x ]; then

    maven_args="${maven_args} -pl $MAVEN_MODULE -am"

  fi



  echo "Found pom.xml ... attempting to build with mvn ${maven_args}"



  local old=$(pwd)

  cd ${STI_SOURCE_DIR}

  check_error "changing directory to ${STI_SOURCE_DIR}" $?



  # =========

  # Run Maven

  mvn --version

  mvn ${maven_env_args} ${maven_args} ${MAVEN_EXTRA_ARGS}

  check_error "Maven build" $?



  # ====================

  # Create the classpath (depending on runMode)

  create_classpath "${maven_env_args}" "${output_dir}" "${app_dir}"



  # ===================

  # Prepare run environment into "run-env.sh"

  local env_file=${app_dir}/${run_env_sh}

  [ -f "${env_file}" ] && rm "${env_file}"



  # Load additional environment variables depending on runMode

  local extra_run_env=`run_environment ${app_dir}`

  if [ "x${extra_run_env}" != x ]; then

     echo "${extra_run_env}" >> "${env_file}"

  fi



  # Read in any properties stored during the build. Copy it over to run-env.sh used in run-java.sh

  for env in "${output_dir}/classes/sti.env" "${output_dir}/sti.env"; do

     if [ -f "${env}" ]; then

        cat "${env}" >> "${env_file}"

     fi

  done



  # ==============

  # Copy artefacts

  echo "Copying Maven artefacts from ${output_dir} to ${app_dir} ..."

  copy_dir ${output_dir} ${app_dir}



  # Save env vars for the run script

  save_app_dir_in_run_env ${app_dir}



  if [ "x${MAVEN_CLEAR_REPO}" != "x" ]; then

    rm -rf "${STI_ARTIFACTS_DIR}/m2"

    check_error "Can not remove local Maven repository ${STI_ARTIFACTS_DIR}/m2" $?

  fi



  cd $old

}



# =========================================================================

# Main



if [ -f "${STI_SOURCE_DIR}/pom.xml" ]; then

  # If a pom.xml is present use maven

  setup_maven

  build_maven $(get_output_dir) $(get_app_dir)

else

  # Assuming that the source already contains compiled artefacts

  echo "Copying binaries from ${output_dir} to ${app_dir} ..."

  copy_dir $(get_output_dir) $(get_app_dir)

fi



echo "... done"
